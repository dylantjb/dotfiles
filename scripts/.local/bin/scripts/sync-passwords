#!/usr/bin/env bash

XDG_DATA_HOME="$HOME/.local/share"
RCLONE_PASSWORD_COMMAND="pass rclone"

LOCAL_LOCATION="$XDG_DATA_HOME/keepassxc"
REMOTE_LOCATION="KeepassXC"

format_datetime_from_string() { echo `date -d "$1" +"%F %T.%3N"`; }

get_remote_passwords_mtime() {
  output=`rclone lsl nextcloud:$REMOTE_PATH 2>/dev/null`
  if [ $? -eq 3 ]; then
    unset output
    return 1
  else
    local string=`echo "$output" | tr -s ' ' | cut -d ' ' -f 3,4;`
    echo `format_datetime_from_string "$string"`
    unset output
    return 0
  fi
}

get_local_passwords_mtime() {
  stat_of_db=`stat -c %y $LOCAL_PATH`
  if [ $? -ne 0 ]; then
    echo ""
    unset stat_of_db
  else
    local string=`echo $stat_of_db | cut -d ' ' -f 1,2;`
    echo `format_datetime_from_string "$string"`
    unset stat_of_db
  fi
}

passwords_export() { rclone copy $LOCAL_PATH nextcloud:$REMOTE_LOCATION; }

passwords_import() { rclone copy nextcloud:$REMOTE_PATH $LOCAL_LOCATION; }

sync_passwords() {
  DB_FILE_NAME="$1.kdbx"
  
  LOCAL_PATH="$LOCAL_LOCATION/$DB_FILE_NAME"
  REMOTE_PATH="$REMOTE_LOCATION/$DB_FILE_NAME"
  
  local human_readable_local_mtime=`get_local_passwords_mtime`
  human_readable_remote_mtime=`get_remote_passwords_mtime 2>/dev/null`
  
  if [ $? -ne 0 ]; then
    printf "No remote passwords database found!\n"
    printf "Exporting...\t"
    passwords_export
    printf "Done!\n"
    return 0
  fi
  
  if [ -z "$human_readable_local_mtime" ]; then
    printf "No local passwords database found!\n"
    printf "Importing...\t"
    passwords_import
    printf "Done!\n"
    return 0
  fi
  
  printf "Local passwords file modification time:\t\t$human_readable_local_mtime\n"
  printf "Remote passwords file modification time:\t$human_readable_remote_mtime\n"
  
  local_mtime_in_seconds_since_epoch=$(date -d "$human_readable_local_mtime" +%s)
  remote_mtime_in_seconds_since_epoch=$(date -d "$human_readable_remote_mtime" +%s)
  unset human_readable_remote_mtime
  
  if [ "$local_mtime_in_seconds_since_epoch" -gt "$remote_mtime_in_seconds_since_epoch" ]; then
          printf "Local passwords file found to be newer than remote!\n"
          printf "Exporting...\t"
          passwords_export
          printf "Done!\n"
  	return 0
  elif [ "$local_mtime_in_seconds_since_epoch" -lt "$remote_mtime_in_seconds_since_epoch" ]; then
    printf "Local passwords file found to be older than remote!\n"
    printf "Importing...\t"
    passwords_import
    printf "Done!\n"
    return 0
  else
    printf "Password files are synchronized.\n"
    return 0
  fi
}

sync_passwords passwords
sync_passwords codes
